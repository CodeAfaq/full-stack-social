import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

import connectionToDb from './controllers/db-connection.js';
import User from './models/usersModel.js';
import authenticate from './middleware/authenticate.js';
import Post from './models/postsModel.js';

const app = express();
app.use(express.static('public'));
dotenv.config();
const PORT = process.env.PORT || 3000; // Make port configurable
const secret_key = process.env.SECRET_KEY;
app.use(express.json());

// Calling Database Connection
connectionToDb();

// Sending Signup Page
app.get('/', (req, res) => {
    res.render('index.html');
});

// API Routes

// Signup
app.post('/signup', async (req, res) => {
    const { fullName, username, email, password } = req.body;
    try {
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: "User already exists!" });
        }
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ fullName, username, email, password: hashedPassword });
        await user.save();
        return res.status(201).json({ message: "User created successfully!" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Login
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: "Invalid credentials!" });
        }
        const matchingPassword = await bcrypt.compare(password, user.password);
        if (!matchingPassword) {
            return res.status(400).json({ message: "Invalid credentials!" });
        }
        const token = jwt.sign({ id: user.id }, secret_key, { expiresIn: '1h' });
        res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' });
        return res.status(200).json({ message: "Login successful!" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Create Post
app.post('/post', authenticate, async (req, res) => {
    const { title, content } = req.body;
    const userID = req.user.id;
    try {
        const post = new Post({ userID, title, content });
        await post.save();
        return res.status(201).json({ message: "Post created successfully!", post });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Get Posts
app.get('/timeline/posts', authenticate, async (req, res) => {
    const userID = req.user.id;
    try {
        const posts = await Post.find({ userID: { $ne: userID } }).populate('userID', 'username fullName');
        return res.status(200).json(posts);
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Update Post
app.put('/update/post/:id', authenticate, async (req, res) => {
    const { title, content } = req.body;
    const postId = req.params.id;
    try {
        const postUpdate = await Post.findByIdAndUpdate(
            postId,
            { title, content },
            { new: true, runValidators: true }
        );
        if (!postUpdate) {
            return res.status(404).json({ message: "Post not found!" });
        }
        return res.status(200).json({ message: "Post updated successfully!", post: postUpdate });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Port Listening
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
